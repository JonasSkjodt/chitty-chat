syntax = "proto3";

option go_package = "github.com/JonasSkjodt/chitty-chat/proto";

package proto;

// compile command: (run from /chitty-chat/)
// USE THIS AFTER YOU ALTER AND SAVE THE PROTO FILE
// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/template.proto

/*
The Client: go run .\client\client.go
The Server: go run .\server\server.go

go run .\client\ alice
*/

// The template service definition.
// you can call it whatever you want
service Template
{
    // one message is sent and one is recieved
    rpc Increment (Amount) returns (Ack);

    // many messages are sent and one is recieved
    rpc SayHi (stream Greeding) returns (Farewell);
}

service Chat {
    rpc SendMessage(ChatMessage) returns (Ack);
    rpc ReceiveMessageStream(ClientName) returns (stream ChatMessage);
}

// Amount is a type containing a string and int. They are intialized as the first and second parameter value.
message Amount {
    string clientName = 1;
    int64 value = 2;
}

message Ack {
    int64 newValue = 1;
    //gave it a status for the chat system
    string status = 2;
}

message Greeding {
    string clientName = 1;
    string message = 2;
}

message Farewell {
    string message = 1;
}

//testing messaging system start
message ChatMessage {
    string clientName = 1;
    string content = 2; // Content field that should be limited to max 128 characters
}

message ClientName {
    string clientName = 1;
}
//testing messaging system end

